{"version":3,"sources":["App.js","index.js"],"names":["App","useState","time","text","timers","setTimers","rate","setRate","pitch","setPitch","voiceIndex","setVoiceIndex","useStopwatch","seconds","isRunning","start","reset","useSpeechSynthesis","speak","supported","speaking","voices","voice","doReset","useCallback","updateTimers","index","newTimers","useEffect","foundTimer","find","timer","length","className","htmlFor","id","name","value","onChange","e","target","map","option","key","lang","TimeSlot","onClick","type","min","max","step","setTime","setText","handleBlur","onBlur","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa7baaa8.chunk.js","sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\nimport { useSpeechSynthesis } from 'react-speech-kit';\nimport { useStopwatch } from 'react-timer-hook';\nimport './App.css';\n\nexport default function App() {\n  const [timers, setTimers] = useState([\n    {time: 2, text:'hello'},\n    {time: 4, text:'this is my massage'},\n    {time: 8, text:'what\\'s up'},\n  ]);\n  const [rate, setRate] = useState(1.0);\n  const [pitch, setPitch] = useState( 1.0);\n  const [voiceIndex, setVoiceIndex] = useState(null);\n  const {seconds, isRunning, start, reset } = useStopwatch({});\n  const {speak, speaking, supported, voices, } = useSpeechSynthesis();\n  \n  const voice = voices[voiceIndex] || null;\n\n  const doReset = useCallback(() => reset(0, false), []);\n  // const doSpeak = useCallback((...p) => speak(...p), []);\n\n  useEffect(() => {\n    const foundTimer = timers.find(timer => timer.time === seconds);\n    if(foundTimer) speak({ text: foundTimer.text, voice, rate, pitch})\n\n    if(seconds > timers[timers.length - 1].time) doReset();\n  }, [seconds]);\n\n  function updateTimers(index, time, text) {\n    const newTimers = [...timers];\n    newTimers[index].time = time;\n    newTimers[index].text = text;\n\n    setTimers(newTimers);\n  }\n\n  function addTimer() {\n    const newTimers = [...timers, { time: 100, text: 'yo'}];\n    setTimers(newTimers);\n  }\n\n  if(!supported) return <div>Your browser not supported speech yet</div>\n\n  return (\n    <div className=\"app\">\n      <h2>Talk the Talk</h2>\n\n      <form>\n        <label htmlFor='voice'>Voice</label>\n        <select \n          id='voice'\n          name='voice'\n          value={voiceIndex || ''}\n          onChange={(e) => setVoiceIndex(e.target.value)}\n        >\n          <option value=''>Default</option>\n          {voices.map((option, index) => (\n            <option key={index} value={index}>\n              {`${option.lang} - ${option.name}`}\n            </option>\n          ))}\n        </select>\n      </form>\n\n      <div className=\"timers\">\n        {/* timers go here */}\n        {timers.map((timer, index) => (\n          <TimeSlot \n            key={index} \n            index={index} \n            timer={timer} \n            updateTimers={updateTimers}\n          />\n        ))}\n\n        <button className=\"add-button\" onClick={addTimer}>Add</button>\n      </div>\n\n      {/* seconds */}\n      <h2>{seconds}</h2>\n\n      {/* buttons */}\n      <div className=\"buttons\">\n        {!isRunning && <button className=\"start-button\" onClick={start}>Start</button>}\n        {isRunning && <button className=\"stop-button\" onClick={doReset}>Stop</button>}\n      </div>\n      <form className='ranges'>\n        <label htmlFor='rate'>rate</label>\n        <input \n          type='range' \n          name='rate' \n          min=\"0.1\" \n          max=\"2\" \n          value={rate} \n          step=\"0.1\" \n          onChange={(e) => setRate(e.target.value)}\n        />\n        <label htmlFor='pitch'>pitch</label>\n        <input \n          type='range' \n          name='pitch' \n          min=\"0.1\" \n          max=\"2\" \n          value={pitch} \n          step=\"0.1\" \n          onChange={(e) => setPitch(e.target.value)}\n        />\n\n      </form>\n    </div>\n  );\n}\n\nfunction TimeSlot({index, timer, updateTimers}) {\n  const [time, setTime] = useState(timer.time);\n  const [text, setText] = useState(timer.text);\n\n  function \n  handleBlur() {\n    updateTimers(index, time, text);\n  }\n\n  return (\n    <form className=\"timer\" key={index}>\n      <input type=\"number\" \n        value={time} \n        onChange={ (e) => setTime(e.target.value)}\n        onBlur={handleBlur}\n      />\n      <input type=\"text\" \n        value={text} \n        onChange={ (e) => setText(e.target.value)}\n        onBlur={handleBlur}\n      />\n    </form>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}